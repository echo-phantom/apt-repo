name: Deploying libasound2 package
on:
  schedule:
    - cron: "30 0 * * *" # run at the start of every day
  workflow_dispatch:
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true


jobs:
  check-sha:
    runs-on: ubuntu-latest
    outputs:
      match_results: ${{ steps.check-shas.outputs.match_results }}
      libasound2_normal_match_results: ${{ steps.check-shas.outputs.libasound2_normal_match_results }}
      libasound2_data_match_results: ${{ steps.check-shas.outputs.libasound2_data_match_results }}
    steps:
      - name: Checking out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Download remote commit shas
        id: check-shas
        run: |
          # Replace jammy repos with kinetic repos
          sudo sed -i 's/jammy/kinetic/g' /etc/apt/sources.list 
          sudo apt-get update -y
          
          # Download libasound2 and libasound2-data
          apt-get download libasound2 libasound2-data
          
          # Calculate package shas
          libasound2_normal_sha=$(sha256sum libasound2_*.deb | awk '{print $1}')
          libasound2_data_sha=$(sha256sum libasound2-*.deb | awk '{print $1}')
          
          # Check remote shas against cached ones
          libasound2_normal_match_results=$([[ "$(cat libasound2_sha-cache.txt | head -1)" == "$libasound2_normal_sha" ]] && echo "true" || echo "false")
          libasound2_data_match_results=$([[ "$(cat libasound2_sha-cache.txt | tail -1)" == "$libasound2_data_sha" ]] && echo "true" || echo "false")
          
          # Compare results and determine if any of the packages was updated
          if [[ "$libasound2_normal_match_results" == "true" && "$libasound2_data_match_results" == "true" ]]; then
            echo "match_results=true" >> $GITHUB_OUTPUT
          else
            echo "match_results=false" >> $GITHUB_OUTPUT
          fi
          
          # Add shas to output
          echo "libasound2_normal_match_results=$libasound2_normal_sha" >> $GITHUB_OUTPUT
          echo "libasound2_data_match_results=$libasound2_data_sha" >> $GITHUB_OUTPUT

  deploy-repo:
    runs-on: ubuntu-latest
    needs: check-sha # needs for the vars from the previous job
    # Only run script when remote sha has changed, aka the results DON'T match
    if: needs.check-sha.outputs.match_results == 'false'
    steps:
      - name: Checking out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Update local commits sha file
        run: |
          echo "${{ needs.check-sha.outputs.libasound2_normal_match_results }}"$'\n'"${{ needs.check-sha.outputs.libasound2_data_match_results }}" > libasound2_sha-cache.txt

      - name: Bump version in system control file
        run: |
          CURRENT_VERSION=$(sed -n '2p' libasound2-control | sed 's/.*://' | xargs) # get current version from control file
          NEXTVERSION=$(echo ${CURRENT_VERSION} | awk -F. -v OFS=. '{$NF += 1 ; print}') # bump version
          sed -i "2s/.*/Version: ${NEXTVERSION}/" libasound2-control # update version in control file

      - name: Creating libasound2 deb package
        run: bash pack-libasound2.sh

      - name: Updating files in main branch
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          # Optional. Commit message for the created commit.
          # Defaults to "Apply automatic changes"
          commit_message: Update files in main branch
          # Only include needed files
          file_pattern: 'libasound2-control libasound2_sha-cache.txt'

      - name: Adding libasound2 packages
        uses: smeinecke/apt-repo-action@v2.1.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          repo_supported_arch: |
            amd64
            i386
          repo_supported_version: |
            kinetic
            jammy
            stable
          file: libasound2-eupnea*.deb
          file_target_version: kinetic
          public_key: ${{ secrets.PUBLIC }}
          private_key: ${{ secrets.PRIVATE }}
          key_passphrase: ""
          repo_folder: "debian_ubuntu"
